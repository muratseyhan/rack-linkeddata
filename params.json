{"name":"Rack-linkeddata","tagline":"Rack middleware for Linked Data content negotiation.","body":"# Linked Data Content Negotiation for Rack Applications\r\n\r\nThis is [Rack][] middleware that provides [Linked Data][] content\r\nnegotiation for Rack applications. You can use `Rack::LinkedData` with any\r\nRuby web framework based on Rack, including with Ruby on Rails 3.0 and with\r\nSinatra.\r\n\r\n* <http://github.com/datagraph/rack-linkeddata>\r\n\r\n[![Gem Version](https://badge.fury.io/rb/rack-linkeddata.png)](http://badge.fury.io/rb/rack-linkeddata)\r\n[![Build Status](https://travis-ci.org/ruby-rdf/rack-linkeddata.png?branch=master)](http://travis-ci.org/ruby-rdf/rack-linkeddata)\r\n\r\n## Features\r\n\r\n* Implements [HTTP content negotiation][conneg] for RDF content types.\r\n* Supports all [RDF.rb][]-compatible serialization formats.\r\n* Compatible with any Rack application and any Rack-based framework.\r\n\r\n## Examples\r\n\r\n### Adding Linked Data content negotiation to a Rails 3.x application\r\n\r\n    # config/application.rb\r\n    require 'rack/linkeddata'\r\n    \r\n    class Application < Rails::Application\r\n      config.middleware.use Rack::LinkedData::ContentNegotiation\r\n    end\r\n\r\n### Adding Linked Data content negotiation to a Sinatra application\r\n\r\n    #!/usr/bin/env ruby -rubygems\r\n    require 'sinatra'\r\n    require 'rack/linkeddata'\r\n    \r\n    use Rack::LinkedData::ContentNegotiation\r\n    \r\n    get '/hello' do\r\n      RDF::Graph.new do |graph|\r\n        graph << [RDF::Node.new, RDF::DC.title, \"Hello, world!\"]\r\n      end\r\n    end\r\n\r\n### Adding Linked Data content negotiation to a Rackup application\r\n\r\n    #!/usr/bin/env rackup\r\n    require 'rack/linkeddata'\r\n    \r\n    rdf = RDF::Graph.new do |graph|\r\n      graph << [RDF::Node.new, RDF::DC.title, \"Hello, world!\"]\r\n    end\r\n    \r\n    use Rack::LinkedData::ContentNegotiation\r\n    run lambda { |env| [200, {}, rdf] }\r\n\r\n### Defining a default Linked Data content type\r\n\r\n    use Rack::LinkedData::ContentNegotiation, :default => \"text/turtle\"\r\n\r\nOptions are also passed to the writer, which can allow options to be shared among the application\r\nand different components.\r\n\r\n    shared_options = {:default => \"text/turtle\", :standard_prefixes => true, }\r\n    use Rack::LinkedData::ContentNegotiation, shared_options\r\n    run MyApplication, shared_options\r\n\r\n### Testing Linked Data content negotiation using `rackup` and `curl`\r\n\r\n    $ rackup doc/examples/hello.ru\r\n    \r\n    $ curl -iH \"Accept: text/plain\" http://localhost:9292/hello\r\n    $ curl -iH \"Accept: text/turtle\" http://localhost:9292/hello\r\n    $ curl -iH \"Accept: application/rdf+xml\" http://localhost:9292/hello\r\n    $ curl -iH \"Accept: application/json\" http://localhost:9292/hello\r\n    $ curl -iH \"Accept: application/trix\" http://localhost:9292/hello\r\n    $ curl -iH \"Accept: */*\" http://localhost:9292/hello\r\n\r\n## Description\r\n\r\n`Rack::LinkedData` implements content negotiation for any [Rack][] response\r\nobject that implements the `RDF::Enumerable` mixin. You would typically\r\nreturn an instance of `RDF::Graph` or `RDF::Repository` from your Rack\r\napplication, and let the `Rack::LinkedData::ContentNegotiation` middleware\r\ntake care of serializing your response into whatever RDF format the HTTP\r\nclient requested and understands.\r\n\r\nThe middleware queries [RDF.rb][] for the MIME content types of known RDF\r\nserialization formats, so it will work with whatever serialization plugins\r\nthat are currently available for RDF.rb. (At present, this includes support\r\nfor N-Triples, N-Quads, Turtle, RDF/XML, RDF/JSON, JSON-LD, RDFa, TriG and TriX.)\r\n\r\n##Documentation\r\n\r\n<http://http://rubydoc.info/github/ruby-rdf/rack-linkeddata/>\r\n\r\n* {Rack::LinkedData}\r\n  * {Rack::LinkedData::ContentNegotiation}\r\n\r\n## Dependencies\r\n\r\n* [Rack](http://rubygems.org/gems/rack) (>= 1.5.2)\r\n* [Linked Data](http://rubygems.org/gems/linkeddata) (>= 1.1)\r\n\r\n## Installation\r\n\r\nThe recommended installation method is via [RubyGems](http://rubygems.org/).\r\nTo install the latest official release of the gem, do:\r\n\r\n    % [sudo] gem install rack-linkeddata\r\n\r\n## Download\r\n\r\nTo get a local working copy of the development repository, do:\r\n\r\n    % git clone git://github.com/ruby-rdf/rack-linkeddata.git\r\n\r\nAlternatively, download the latest development version as a tarball as\r\nfollows:\r\n\r\n    % wget http://github.com/ruby-rdf/rack-linkeddata/tarball/master\r\n\r\n## Contributing\r\nThis repository uses [Git Flow](https://github.com/nvie/gitflow) to mange development and release activity. All submissions _must_ be on a feature branch based on the _develop_ branch to ease staging and integration.\r\n\r\n* Do your best to adhere to the existing coding conventions and idioms.\r\n* Don't use hard tabs, and don't leave trailing whitespace on any line.\r\n* Do document every method you add using [YARD][] annotations. Read the\r\n  [tutorial][YARD-GS] or just look at the existing code for examples.\r\n* Don't touch the `.gemspec`, `VERSION` or `AUTHORS` files. If you need to\r\n  change them, do so on your private branch only.\r\n* Do feel free to add yourself to the `CREDITS` file and the corresponding\r\n  list in the the `README`. Alphabetical order applies.\r\n* Do note that in order for us to merge any non-trivial changes (as a rule\r\n  of thumb, additions larger than about 15 lines of code), we need an\r\n  explicit [public domain dedication][PDD] on record from you.\r\n\r\n## References\r\n\r\n* <http://www.w3.org/DesignIssues/LinkedData.html>\r\n* <http://linkeddata.org/docs/how-to-publish>\r\n* <http://linkeddata.org/conneg-303-redirect-code-samples>\r\n* <http://www.w3.org/TR/cooluris/>\r\n* <http://www.w3.org/TR/swbp-vocab-pub/>\r\n* <http://patterns.dataincubator.org/book/publishing-patterns.html>\r\n\r\n## Authors\r\n\r\n* [Arto Bendiken](http://github.com/bendiken) - <http://ar.to/>\r\n* [Gregg Kellogg](http://github.com/gkellogg) - <http://greggkellogg.net/>\r\n\r\n## License\r\n\r\nThis is free and unencumbered public domain software. For more information,\r\nsee <http://unlicense.org/> or the accompanying {file:UNLICENSE} file.\r\n\r\n[Rack]:           http://rack.github.com/\r\n[RDF.rb]:         http://ruby-rdf.github.com/rdf/\r\n[Linked Data]:    http://linkeddata.org/\r\n[conneg]:         http://en.wikipedia.org/wiki/Content_negotiation\r\n[YARD]:            http://yardoc.org/\r\n[YARD-GS]:         http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\r\n[PDD]:             http://unlicense.org/#unlicensing-contributions\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}